import os
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from apscheduler.schedulers.background import BackgroundScheduler

TOKEN = os.getenv("TOKEN")

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è chat_id –∑ —Ñ–∞–π–ª—É (–∞–±–æ —Å—Ç–≤–æ—Ä—é—î—Ç—å—Å—è –ø—ñ—Å–ª—è /getchatid)
CHAT_ID = None
try:
    with open("chat_id.txt", "r") as f:
        CHAT_ID = f.read().strip()
except FileNotFoundError:
    print("–§–∞–π–ª chat_id.txt –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ‚Äî –±—É–¥–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ /getchatid")

KPI_LINK = 'https://docs.google.com/spreadsheets/d/187czH5iolCe_wmARbZ_blpQjzJQHQ7__/edit?gid=1652687997'

KPI_INFO = {
    "–ß—Ç–æ —Ç–∞–∫–æ–µ KPI": (
        "üìä *KPI* ‚Äî —ç—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –º–µ—Ç—Ä–∏–∫–∞ –∏–ª–∏ –∑–∞–¥–∞—á–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –æ—Ü–µ–Ω–∏–≤–∞—é—Ç, "
        "–Ω–∞—Å–∫–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–æ —Ç—ã —Å–ø—Ä–∞–≤–ª—è–µ—à—å—Å—è —Å–æ —Å–≤–æ–µ–π —Ä–∞–±–æ—Ç–æ–π.\n\n"
        "üí° –ò–ª–∏, –∫–∞–∫ —Å–∫–∞–∑–∞–ª *–ü–∏—Ç–µ—Ä –î—Ä—É–∫–µ—Ä*: _¬´–¢–æ, —á—Ç–æ –∏–∑–º–µ—Ä—è–µ—Ç—Å—è ‚Äî —É–ª—É—á—à–∞–µ—Ç—Å—è¬ª_."
    ),
    "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è": (
        "‚úçÔ∏è –ü–∏—à–µ–º –∑–∞–¥–∞—á–∏ –ø–æ *SMART*: –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã, –∏–∑–º–µ—Ä–∏–º—ã, –¥–æ—Å—Ç–∏–∂–∏–º—ã, —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏.\n\n"
        "üìå *1) –§–æ–∫—É—Å–Ω—ã–µ –∑–∞–¥–∞—á–∏:*\n"
        "–ö–∞–∂–¥—ã–π –º–µ—Å—è—Ü —É —Ç–µ–±—è –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞—á–∏ –≤ *Asana*, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫ KPI.\n\n"
        "üìå *2) –ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á:*\n"
        "–° 1 –ø–æ 3 —á–∏—Å–ª–æ —Å—Ç–∞–≤–∏–º –∑–∞–¥–∞—á–∏ –∏ –≤–Ω–æ—Å–∏–º –≤ —Ç–∞–±–ª–∏—Ü—É.\n\n"
        "üìå *3) –û—Ç—á–µ—Ç:*\n"
        "–î–æ 30 —á–∏—Å–ª–∞ ‚Äî –∑–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É: —Å—Å—ã–ª–∫–∞, %, –∏ –∫–∞—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."
    ),
    "–ö—Ä–∏—Ç–µ—Ä–∏–∏": (
        "‚úÖ –ó–∞–¥–∞—á–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π, –µ—Å–ª–∏:\n"
        "‚Ä¢ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –Ω–∞ *100%*\n"
        "‚Ä¢ –≤ —Å—Ä–æ–∫\n"
        "‚Ä¢ –∏ —Å –Ω—É–∂–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º ‚úÖ"
    )
}

keyboard = [
    ["–ß—Ç–æ —Ç–∞–∫–æ–µ KPI", "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"],
    ["–ö—Ä–∏—Ç–µ—Ä–∏–∏", "–§–∞–π–ª"]
]
markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–µ –∑–∞–±—ã—Ç—å –ø—Ä–æ KPI –∏ –ø–æ–¥—Å–∫–∞–∂—É, –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏—Ö –æ—Ñ–æ—Ä–º–∏—Ç—å.",
        reply_markup=markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text in KPI_INFO:
        await update.message.reply_text(KPI_INFO[text], parse_mode='Markdown')
    elif text == "–§–∞–π–ª":
        await update.message.reply_text(f"üìé –í–æ—Ç —Ç–∞–±–ª–∏—Ü–∞ KPI:\n{KPI_LINK}")
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É —Å –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ üëá")

# /getchatid
async def get_chat_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message is None or update.message.chat.type not in ['group', 'supergroup', 'private']:
        return

    global CHAT_ID
    CHAT_ID = str(update.effective_chat.id)

    with open("chat_id.txt", "w") as f:
        f.write(CHAT_ID)

    await update.message.reply_text(
        f"‚úÖ –í–∞—à chat_id —Å–æ—Ö—Ä–∞–Ω—ë–Ω: `{CHAT_ID}`",
        parse_mode="Markdown"
    )

# –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ 1-–≥–æ —á–∏—Å–ª–∞
async def monthly_reminder_kpi(context: ContextTypes.DEFAULT_TYPE):
    if CHAT_ID:
        await context.bot.send_message(
            chat_id=CHAT_ID,
            text=(
                "üìÖ *–ü–æ—Ä–∞ –ø–æ—Å—Ç–∞–≤–∏—Ç—å KPI –Ω–∞ –º–µ—Å—è—Ü!*\n"
                "–î–µ–¥–ª–∞–π–Ω ‚Äî *2-–µ —á–∏—Å–ª–æ* –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–Ω–µ—Å–∏—Ç–µ –∑–∞–¥–∞—á–∏ –≤ —Ç–∞–±–ª–∏—Ü—É:\n"
                f"{KPI_LINK}\n\n"
                "‚ö†Ô∏è –í—Å–µ –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã *–¥–ª—è –°–≤–µ—Ç–ª–∞–Ω—ã –ö—Ä–∞—Å–Ω–∏–∫–æ–≤–æ–π*, "
                "–∞ —Ç–∞–∫–∂–µ –ù–∏–∫–∏—Ç—ã –§–∏–ª–∏–º–æ–Ω–æ–≤–∞, –û–ª—å–≥–∏ –ú–µ—Ü –∏ –ú–∞—Ä–∏–Ω—ã."
            ),
            parse_mode='Markdown'
        )

# –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ 28-–≥–æ —á–∏—Å–ª–∞
async def kpi_completion_reminder(context: ContextTypes.DEFAULT_TYPE):
    if CHAT_ID:
        await context.bot.send_message(
            chat_id=CHAT_ID,
            text=(
                "üìå *–§–∏–Ω–∞–ª—å–Ω—ã–π —à—Ç—Ä–∏—Ö!* –ü—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è –¥–µ–¥–ª–∞–π–Ω –ø–æ KPI.\n"
                "–ü—Ä–æ—Å–∏–º –≤–Ω–µ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ KPI –≤ —Ç–∞–±–ª–∏—Ü—É –¥–æ –∫–æ–Ω—Ü–∞ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è:\n"
                f"{KPI_LINK}"
            ),
            parse_mode='Markdown'
        )

# –ó–∞–ø—É—Å–∫
app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("getchatid", get_chat_id))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
scheduler = BackgroundScheduler(timezone="Europe/Kyiv")
scheduler.add_job(monthly_reminder_kpi, trigger='cron', day=1, hour=10, minute=0, args=[app.bot])
scheduler.add_job(kpi_completion_reminder, trigger='cron', day=28, hour=10, minute=0, args=[app.bot])
scheduler.start()

app.run_polling()
