import os
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from apscheduler.schedulers.background import BackgroundScheduler

TOKEN = os.getenv("TOKEN")
KPI_LINK = 'https://docs.google.com/spreadsheets/d/187czH5iolCe_wmARbZ_blpQjzJQHQ7__/edit?gid=1652687997'

CHAT_ID = None
try:
    with open("chat_id.txt", "r") as f:
        CHAT_ID = f.read().strip()
except FileNotFoundError:
    print("–§–∞–π–ª chat_id.txt –Ω–µ –Ω–∞–π–¥–µ–Ω.")

KPI_INFO = {
    "–ß—Ç–æ —Ç–∞–∫–æ–µ KPI": (
        "üìä *KPI* ‚Äî —ç—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –º–µ—Ç—Ä–∏–∫–∞ –∏–ª–∏ –∑–∞–¥–∞—á–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –æ—Ü–µ–Ω–∏–≤–∞—é—Ç, "
        "–Ω–∞—Å–∫–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–æ —Ç—ã —Å–ø—Ä–∞–≤–ª—è–µ—à—å—Å—è —Å–æ —Å–≤–æ–µ–π —Ä–∞–±–æ—Ç–æ–π.\n\n"
        "üí° –ö–∞–∫ —Å–∫–∞–∑–∞–ª –ü–∏—Ç–µ—Ä –î—Ä—É–∫–µ—Ä: _¬´–¢–æ, —á—Ç–æ –∏–∑–º–µ—Ä—è–µ—Ç—Å—è ‚Äî —É–ª—É—á—à–∞–µ—Ç—Å—è¬ª_."
    ),
    "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è": (
        "‚úçÔ∏è –ü–∏—à–µ–º –∑–∞–¥–∞—á–∏ –ø–æ *SMART*: –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã, –∏–∑–º–µ—Ä–∏–º—ã, –¥–æ—Å—Ç–∏–∂–∏–º—ã, —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏.\n\n"
        "üìå *1) –§–æ–∫—É—Å–Ω—ã–µ –∑–∞–¥–∞—á–∏:* –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ Asana –∏ —Å–≤—è–∑–∞–Ω—ã —Å KPI\n"
        "üìå *2) –°—Ç–∞–≤–∏–º –∑–∞–¥–∞—á–∏ —Å 1 –ø–æ 3 —á–∏—Å–ª–æ –∏ –≤–Ω–æ—Å–∏–º –≤ —Ç–∞–±–ª–∏—Ü—É\n"
        "üìå *3) –î–æ 30 —á–∏—Å–ª–∞ ‚Äî –æ—Ç—á—ë—Ç: —Å—Ç–∞—Ç—É—Å, —Å—Å—ã–ª–∫–∞, –∫–∞—á–µ—Å—Ç–≤–æ"
    ),
    "–ö—Ä–∏—Ç–µ—Ä–∏–∏": (
        "‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –µ—Å–ª–∏:\n‚Ä¢ 100%\n‚Ä¢ –≤ —Å—Ä–æ–∫\n‚Ä¢ –Ω—É–∂–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ"
    )
}

keyboard = [
    ["–ß—Ç–æ —Ç–∞–∫–æ–µ KPI", "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"],
    ["–ö—Ä–∏—Ç–µ—Ä–∏–∏", "–§–∞–π–ª"]
]
markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–µ –∑–∞–±—ã—Ç—å –ø—Ä–æ KPI –∏ –ø–æ–¥—Å–∫–∞–∂—É, –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏—Ö –æ—Ñ–æ—Ä–º–∏—Ç—å.",
        reply_markup=markup
    )

async def get_chat_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global CHAT_ID
    CHAT_ID = str(update.effective_chat.id)
    with open("chat_id.txt", "w") as f:
        f.write(CHAT_ID)
    await update.message.reply_text(
        f"‚úÖ –í–∞—à chat_id —Å–æ—Ö—Ä–∞–Ω—ë–Ω: `{CHAT_ID}`", parse_mode="Markdown"
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text in KPI_INFO:
        await update.message.reply_text(KPI_INFO[text], parse_mode='Markdown')
    elif text == "–§–∞–π–ª":
        await update.message.reply_text(f"üìé –í–æ—Ç —Ç–∞–±–ª–∏—Ü–∞ KPI:\n{KPI_LINK}")
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É —Å –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ üëá")

async def monthly_reminder_kpi(context: ContextTypes.DEFAULT_TYPE):
    if CHAT_ID:
        await context.bot.send_message(
            chat_id=CHAT_ID,
            text=(
                "üìÖ *–ü–æ—Ä–∞ –ø–æ—Å—Ç–∞–≤–∏—Ç—å KPI –Ω–∞ –º–µ—Å—è—Ü!*\n"
                f"{KPI_LINK}\n\n"
                "‚ö†Ô∏è –û—Ç–∫—Ä–æ–π—Ç–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –ö—Ä–∞—Å–Ω–∏–∫–æ–≤–æ–π, –§–∏–ª–∏–º–æ–Ω–æ–≤–∞, –ú–µ—Ü, –ú–∞—Ä–∏–Ω—ã."
            ),
            parse_mode='Markdown'
        )

async def kpi_completion_reminder(context: ContextTypes.DEFAULT_TYPE):
    if CHAT_ID:
        await context.bot.send_message(
            chat_id=CHAT_ID,
            text=(
                "üìå *–§–∏–Ω–∞–ª—å–Ω—ã–π —à—Ç—Ä–∏—Ö!* –í–Ω–µ—Å–∏—Ç–µ KPI –≤ —Ç–∞–±–ª–∏—Ü—É –¥–æ –∑–∞–≤—Ç—Ä–∞:\n"
                f"{KPI_LINK}"
            ),
            parse_mode='Markdown'
        )

if __name__ == '__main__':
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("getchatid", get_chat_id))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    scheduler = BackgroundScheduler(timezone="Europe/Kyiv")
    scheduler.add_job(monthly_reminder_kpi, 'cron', day=1, hour=10, args=[app.bot])
    scheduler.add_job(kpi_completion_reminder, 'cron', day=28, hour=10, args=[app.bot])
    scheduler.start()

    app.run_polling()
